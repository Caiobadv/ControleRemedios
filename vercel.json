import React, { useState, useEffect } from 'react';
import { createRoot } from 'react-dom/client';

// Estilos CSS
const styles = {
  container: {
    maxWidth: '800px',
    margin: '0 auto',
    padding: '20px',
    fontFamily: 'Arial, sans-serif',
  },
  header: {
    textAlign: 'center',
    marginBottom: '30px',
  },
  form: {
    marginBottom: '20px',
    padding: '15px',
    backgroundColor: '#f5f5f5',
    borderRadius: '5px',
  },
  input: {
    width: '100%',
    padding: '8px',
    margin: '5px 0',
    borderRadius: '4px',
    border: '1px solid #ddd',
  },
  button: {
    padding: '10px 15px',
    backgroundColor: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    margin: '5px 5px 5px 0',
  },
  dangerButton: {
    backgroundColor: '#f44336',
  },
  warningButton: {
    backgroundColor: '#ff9800',
  },
  medicationCard: {
    border: '1px solid #ddd',
    borderRadius: '5px',
    padding: '15px',
    marginBottom: '15px',
    backgroundColor: 'white',
  },
  lowStock: {
    color: 'red',
    fontWeight: 'bold',
  },
  tabs: {
    display: 'flex',
    marginBottom: '20px',
  },
  tab: {
    padding: '10px 20px',
    backgroundColor: '#f1f1f1',
    cursor: 'pointer',
    borderRadius: '5px 5px 0 0',
    marginRight: '5px',
  },
  activeTab: {
    backgroundColor: '#4CAF50',
    color: 'white',
  },
  medicineList: {
    marginBottom: '20px',
  },
  historyItem: {
    padding: '10px',
    borderBottom: '1px solid #eee',
  },
};

// Componente principal da aplicação
function App() {
  // Estados para armazenar os dados
  const [medications, setMedications] = useState([]);
  const [history, setHistory] = useState([]);
  const [newMedication, setNewMedication] = useState({
    name: '',
    dosage: '',
    frequency: '',
    stock: 0,
    alertThreshold: 5,
    lastTaken: null,
    nextDue: null,
  });
  const [activeTab, setActiveTab] = useState('medicines');

  // Carregar dados do localStorage ao iniciar
  useEffect(() => {
    const savedMedications = localStorage.getItem('medications');
    const savedHistory = localStorage.getItem('medicationHistory');
    
    if (savedMedications) {
      setMedications(JSON.parse(savedMedications));
    }
    
    if (savedHistory) {
      setHistory(JSON.parse(savedHistory));
    }
  }, []);

  // Salvar dados no localStorage quando há mudanças
  useEffect(() => {
    localStorage.setItem('medications', JSON.stringify(medications));
  }, [medications]);

  useEffect(() => {
    localStorage.setItem('medicationHistory', JSON.stringify(history));
  }, [history]);

  // Função para adicionar um novo medicamento
  const handleAddMedication = (e) => {
    e.preventDefault();
    
    // Validar campos obrigatórios
    if (!newMedication.name || !newMedication.dosage || !newMedication.frequency || newMedication.stock <= 0) {
      alert('Por favor, preencha todos os campos obrigatórios.');
      return;
    }
    
    // Calcular próxima data com base na frequência
    const nextDue = calculateNextDue(new Date(), newMedication.frequency);
    
    const medicationWithId = {
      ...newMedication,
      id: Date.now().toString(),
      nextDue,
    };
    
    setMedications([...medications, medicationWithId]);
    setNewMedication({
      name: '',
      dosage: '',
      frequency: '',
      stock: 0,
      alertThreshold: 5,
      lastTaken: null,
      nextDue: null,
    });
    
    // Adicionar ao histórico
    addToHistory(`Medicamento ${medicationWithId.name} adicionado com estoque inicial de ${medicationWithId.stock} unidades.`);
  };

  // Função para registrar a tomada de um medicamento
  const handleTakeMedication = (id) => {
    const now = new Date();
    
    setMedications(medications.map(med => {
      if (med.id === id) {
        // Calcular próxima data com base na frequência
        const nextDue = calculateNextDue(now, med.frequency);
        const newStock = med.stock - 1;
        
        // Adicionar ao histórico
        addToHistory(`${med.name} foi tomado em ${formatDate(now)}. Estoque restante: ${newStock} unidades.`);
        
        return {
          ...med,
          lastTaken: now.toISOString(),
          nextDue,
          stock: newStock,
        };
      }
      return med;
    }));
  };

  // Função para adicionar estoque de um medicamento
  const handleAddStock = (id, amount) => {
    const amountToAdd = parseInt(prompt(`Quantas unidades deseja adicionar ao estoque?`, "1"));
    
    if (isNaN(amountToAdd) || amountToAdd <= 0) {
      alert('Por favor, informe um número válido maior que zero.');
      return;
    }
    
    setMedications(medications.map(med => {
      if (med.id === id) {
        const newStock = med.stock + amountToAdd;
        addToHistory(`Adicionadas ${amountToAdd} unidades de ${med.name} ao estoque. Novo total: ${newStock} unidades.`);
        
        return {
          ...med,
          stock: newStock,
        };
      }
      return med;
    }));
  };

  // Função para remover um medicamento
  const handleRemoveMedication = (id) => {
    const medicationToRemove = medications.find(med => med.id === id);
    if (!medicationToRemove) return;
    
    if (window.confirm(`Tem certeza que deseja remover ${medicationToRemove.name} da lista?`)) {
      setMedications(medications.filter(med => med.id !== id));
      addToHistory(`Medicamento ${medicationToRemove.name} foi removido da lista.`);
    }
  };

  // Função para adicionar eventos ao histórico
  const addToHistory = (message) => {
    const historyItem = {
      id: Date.now().toString(),
      date: new Date().toISOString(),
      message,
    };
    
    setHistory([historyItem, ...history]);
  };

  // Função para calcular a próxima data com base na frequência
  const calculateNextDue = (date, frequency) => {
    const nextDate = new Date(date);
    
    if (frequency.includes('hora')) {
      const hours = parseInt(frequency.match(/\d+/)[0]);
      nextDate.setHours(nextDate.getHours() + hours);
    } else if (frequency.includes('dia')) {
      const days = parseInt(frequency.match(/\d+/)[0]);
      nextDate.setDate(nextDate.getDate() + days);
    } else if (frequency.includes('semana')) {
      const weeks = parseInt(frequency.match(/\d+/)[0]);
      nextDate.setDate(nextDate.getDate() + (weeks * 7));
    } else if (frequency.includes('mês')) {
      const months = parseInt(frequency.match(/\d+/)[0]);
      nextDate.setMonth(nextDate.getMonth() + months);
    }
    
    return nextDate.toISOString();
  };

  // Função auxiliar para formatar datas
  const formatDate = (date) => {
    if (!date) return 'Nunca';
    
    if (typeof date === 'string') {
      date = new Date(date);
    }
    
    return new Intl.DateTimeFormat('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    }).format(date);
  };

  // Verificar se um medicamento está com estoque baixo
  const isLowStock = (medication) => {
    return medication.stock <= medication.alertThreshold;
  };

  // Verificar se um medicamento está atrasado para ser tomado
  const isOverdue = (medication) => {
    if (!medication.nextDue) return false;
    
    const now = new Date();
    const nextDue = new Date(medication.nextDue);
    
    return nextDue < now;
  };

  // Ordenar medicamentos (atrasados primeiro, depois com estoque baixo)
  const sortedMedications = [...medications].sort((a, b) => {
    if (isOverdue(a) && !isOverdue(b)) return -1;
    if (!isOverdue(a) && isOverdue(b)) return 1;
    if (isLowStock(a) && !isLowStock(b)) return -1;
    if (!isLowStock(a) && isLowStock(b)) return 1;
    return 0;
  });

  return (
    <div style={styles.container}>
      <div style={styles.header}>
        <h1>Controle de Medicamentos</h1>
      </div>
      
      <div style={styles.tabs}>
        <div 
          style={{...styles.tab, ...(activeTab === 'medicines' ? styles.activeTab : {})}} 
          onClick={() => setActiveTab('medicines')}
        >
          Medicamentos
        </div>
        <div 
          style={{...styles.tab, ...(activeTab === 'add' ? styles.activeTab : {})}} 
          onClick={() => setActiveTab('add')}
        >
          Adicionar Novo
        </div>
        <div 
          style={{...styles.tab, ...(activeTab === 'history' ? styles.activeTab : {})}} 
          onClick={() => setActiveTab('history')}
        >
          Histórico
        </div>
      </div>
      
      {activeTab === 'add' && (
        <div style={styles.form}>
          <h2>Adicionar Novo Medicamento</h2>
          <form onSubmit={handleAddMedication}>
            <div>
              <label htmlFor="name">Nome do Medicamento</label>
              <input
                id="name"
                type="text"
                style={styles.input}
                value={newMedication.name}
                onChange={(e) => setNewMedication({...newMedication, name: e.target.value})}
                placeholder="Ex: Paracetamol"
                required
              />
            </div>
            
            <div>
              <label htmlFor="dosage">Dosagem</label>
              <input
                id="dosage"
                type="text"
                style={styles.input}
                value={newMedication.dosage}
                onChange={(e) => setNewMedication({...newMedication, dosage: e.target.value})}
                placeholder="Ex: 500mg, 1 comprimido"
                required
              />
            </div>
            
            <div>
              <label htmlFor="frequency">Frequência</label>
              <input
                id="frequency"
                type="text"
                style={styles.input}
                value={newMedication.frequency}
                onChange={(e) => setNewMedication({...newMedication, frequency: e.target.value})}
                placeholder="Ex: 8 horas, 1 dia, 1 semana"
                required
              />
            </div>
            
            <div>
              <label htmlFor="stock">Estoque Inicial</label>
              <input
                id="stock"
                type="number"
                style={styles.input}
                value={newMedication.stock}
                onChange={(e) => setNewMedication({...newMedication, stock: parseInt(e.target.value) || 0})}
                min="1"
                required
              />
            </div>
            
            <div>
              <label htmlFor="alertThreshold">Alerta de Estoque Baixo</label>
              <input
                id="alertThreshold"
                type="number"
                style={styles.input}
                value={newMedication.alertThreshold}
                onChange={(e) => setNewMedication({...newMedication, alertThreshold: parseInt(e.target.value) || 0})}
                min="1"
              />
            </div>
            
            <button type="submit" style={styles.button}>Adicionar Medicamento</button>
          </form>
        </div>
      )}
      
      {activeTab === 'medicines' && (
        <div style={styles.medicineList}>
          <h2>Lista de Medicamentos</h2>
          
          {sortedMedications.length === 0 ? (
            <p>Nenhum medicamento cadastrado. Use a aba "Adicionar Novo" para cadastrar medicamentos.</p>
          ) : (
            sortedMedications.map(medication => (
              <div key={medication.id} style={styles.medicationCard}>
                <h3>{medication.name}</h3>
                <p><strong>Dosagem:</strong> {medication.dosage}</p>
                <p><strong>Frequência:</strong> {medication.frequency}</p>
                <p>
                  <strong>Estoque:</strong> 
                  <span style={isLowStock(medication) ? styles.lowStock : {}}>
                    {medication.stock} unidades
                    {isLowStock(medication) && ' (Estoque Baixo)'}
                  </span>
                </p>
                <p><strong>Última vez tomado:</strong> {formatDate(medication.lastTaken)}</p>
                <p>
                  <strong>Próxima dose prevista:</strong> 
                  <span style={isOverdue(medication) ? styles.lowStock : {}}>
                    {formatDate(medication.nextDue)}
                    {isOverdue(medication) && ' (Atrasado)'}
                  </span>
                </p>
                
                <div>
                  <button 
                    style={styles.button} 
                    onClick={() => handleTakeMedication(medication.id)}
                    disabled={medication.stock <= 0}
                  >
                    Registrar Dose
                  </button>
                  
                  <button 
                    style={{...styles.button, ...styles.warningButton}} 
                    onClick={() => handleAddStock(medication.id)}
                  >
                    Adicionar Estoque
                  </button>
                  
                  <button 
                    style={{...styles.button, ...styles.dangerButton}} 
                    onClick={() => handleRemoveMedication(medication.id)}
                  >
                    Remover
                  </button>
                </div>
              </div>
            ))
          )}
        </div>
      )}
      
      {activeTab === 'history' && (
        <div>
          <h2>Histórico de Atividades</h2>
          
          {history.length === 0 ? (
            <p>Nenhuma atividade registrada.</p>
          ) : (
            history.map(item => (
              <div key={item.id} style={styles.historyItem}>
                <strong>{formatDate(item.date)}:</strong> {item.message}
              </div>
            ))
          )}
        </div>
      )}
    </div>
  );
}

// Renderizar a aplicação
const rootElement = document.getElementById('root');
const root = createRoot(rootElement);
root.render(<App />);